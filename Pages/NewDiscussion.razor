@page "/new-discussion";
@using MudBlazor;

<div class="new-discussion-page-wrapper">
    <div class="content-wrapper">
        <MudText class="page-title" Style="font-size:45px; font-weight:bold; margin-bottom: 35px;">Create a New Discussion</MudText>
        <MudTextField @bind-Value="@Title" Label="Title" Variant="Variant.Outlined" Margin="Margin.Dense" OnInternalInputChanged="(e)=> { Title=(string)e.Value; ValidateFields(); }" />
        <MudTextField @bind-Value="@Description" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" />
        <MudAlert @bind-Value="@InputTopic" Label="Related Topics" Variant="Variant.Outlined" Margin="Margin.Dense" />
        <div class="d-flex align-end justify-space-between mud-width-full" style="margin-top:25px; margin-bottom:25px;">
            <div class="d-flex flex-column">
                <MudText><b>Title:</b> @Title</MudText>
                <MudText><b>Description:</b> @Description</MudText>
                <MudText><b>InputTopic:</b>@InputTopic</MudText>
            </div>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="Reset">Reset Model</MudButton>
        </div>

        @if (isTyping)
        {
            <div class="spinner-control">
                <div class="spinner-wrapper">
                    <div class="spinner"></div>
                </div>
                <span>🧤Checking input values...</span>
            </div>
        }

        @if (InputError)
        {
            <div class="error-list-wrapper">
                <MudText Style="font-size:15px; color:white;">❌❗ Error List</MudText>
                <ul class="error-list-items-wrapper">
                    @foreach (string error in ErrorList)
                    {
                        <MudAlert Severity="Severity.Error" class="error-list-item">@error</MudAlert>
                    }
                </ul>
            </div>
        }       

        @if (!isDataValidated)
        {
            <MudAlert Severity="Severity.Normal">Enter data for validation.</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Success">All good here, try to create this discussion for the word to comment on it.</MudAlert>
        }
        <MudButton Style="font-size:25px; font-weight:bold;">🧧Create</MudButton>
    </div>
</div>

@code {
    #region Properties
    // Input Properties
    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private string InputTopic { get; set; } = "";
    private List<string> Topics { get; set; } = new List<string>();
    // Input Error Control
    private List<string> ErrorList { get; set; } = new List<string>();
    private bool InputError { get; set; } = true;
    private bool isDataValidated { get; set; } = false;
    // Animations Control
    private bool isTyping { get; set; } = false;
    #endregion

    #region Methods
    public void Reset()
    {
        this.Title = "";
        this.Description = "";
        this.InputTopic = "";
    }

    public void ValidateFields()
    {
        isTyping = true;

        var validationRules = new List<string> {
            "The title must have more then five letters.",
            "The description must have more then twenty letters.",
            "The discussion must have at least one topic."
        };

        // Validation Rules Check
        if (Title.Length < 5 && !ErrorList.Contains(validationRules[0]))
            ErrorList.Add(validationRules[0]);
        else if (ErrorList.Contains(validationRules[0]))
            ErrorList.Remove(validationRules[0]);

        if (Description.Length < 20 && !ErrorList.Contains(validationRules[1]))
            ErrorList.Add(validationRules[1]);
        else if (ErrorList.Contains(validationRules[1]))
            ErrorList.Remove(validationRules[1]);

        if (InputTopic.Count() > 1 && !ErrorList.Contains(validationRules[2]))
            ErrorList.Add(validationRules[2]);
        else if (ErrorList.Contains(validationRules[2]))
            ErrorList.Remove(validationRules[2]);

        InputError = ErrorList.Count > 1;
        isDataValidated = ErrorList.Count() == 0;
    }
    #endregion
}
